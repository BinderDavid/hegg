<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="453" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="453" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.oneof (19 samples, 1.90%)</title><rect x="1154.6" y="117" width="22.4" height="15.0" fill="rgb(233,7,15)" rx="2" ry="2" />
<text text-anchor="" x="1157.60" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >T..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.Runners.Utils.timed (328 samples, 32.80%)</title><rect x="790.0" y="325" width="387.0" height="15.0" fill="rgb(215,102,12)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.Runners.Utils.timed</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.rebuild (32 samples, 3.20%)</title><rect x="928.0" y="133" width="37.8" height="15.0" fill="rgb(235,91,38)" rx="2" ry="2" />
<text text-anchor="" x="931.04" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Dat..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.rebuild (30 samples, 3.00%)</title><rect x="1119.2" y="117" width="35.4" height="15.0" fill="rgb(251,188,4)" rx="2" ry="2" />
<text text-anchor="" x="1122.20" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Da..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.Core.foldTestTree (328 samples, 32.80%)</title><rect x="790.0" y="261" width="387.0" height="15.0" fill="rgb(216,122,30)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.Core.foldTestTree</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>UNKNOWN (11 samples, 1.10%)</title><rect x="1177.0" y="405" width="13.0" height="15.0" fill="rgb(208,28,26)" rx="2" ry="2" />
<text text-anchor="" x="1180.02" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.add (58 samples, 5.80%)</title><rect x="859.6" y="133" width="68.4" height="15.0" fill="rgb(227,23,4)" rx="2" ry="2" />
<text text-anchor="" x="862.60" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data.Eq..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.merge (2 samples, 0.20%)</title><rect x="817.1" y="133" width="2.4" height="15.0" fill="rgb(251,95,25)" rx="2" ry="2" />
<text text-anchor="" x="820.12" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Test.runATest (328 samples, 32.80%)</title><rect x="790.0" y="181" width="387.0" height="15.0" fill="rgb(205,136,33)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Test.runATest</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseInt64 (10 samples, 1.00%)</title><rect x="982.3" y="85" width="11.8" height="15.0" fill="rgb(240,35,34)" rx="2" ry="2" />
<text text-anchor="" x="985.32" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.merge (32 samples, 3.20%)</title><rect x="137.4" y="357" width="37.8" height="15.0" fill="rgb(246,43,25)" rx="2" ry="2" />
<text text-anchor="" x="140.44" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Dat..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Matching.Data.Equality.Matching.eGraphToDatabase (9 samples, 0.90%)</title><rect x="210.6" y="357" width="10.6" height="15.0" fill="rgb(252,67,28)" rx="2" ry="2" />
<text text-anchor="" x="213.60" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Matching.Data.Equality.Matching.compileToQuery (1 samples, 0.10%)</title><rect x="209.4" y="357" width="1.2" height="15.0" fill="rgb(253,209,40)" rx="2" ry="2" />
<text text-anchor="" x="212.42" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Matching.Database.Data.Equality.Matching.Database.intersectAtoms (440 samples, 44.00%)</title><rect x="270.8" y="341" width="519.2" height="15.0" fill="rgb(241,28,33)" rx="2" ry="2" />
<text text-anchor="" x="273.78" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data.Equality.Matching.Database.Data.Equality.Matching.Database.interse..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.repair (29 samples, 2.90%)</title><rect x="1120.4" y="101" width="34.2" height="15.0" fill="rgb(251,46,41)" rx="2" ry="2" />
<text text-anchor="" x="1123.38" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Da..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.oneof (23 samples, 2.30%)</title><rect x="967.0" y="133" width="27.1" height="15.0" fill="rgb(235,36,29)" rx="2" ry="2" />
<text text-anchor="" x="969.98" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >T..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Text.withNullTerminal (328 samples, 32.80%)</title><rect x="790.0" y="213" width="387.0" height="15.0" fill="rgb(222,66,30)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Text.withNullTerminal</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.Parallel.runInParallel (328 samples, 32.80%)</title><rect x="790.0" y="309" width="387.0" height="15.0" fill="rgb(227,26,21)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.Parallel.runInParallel</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.Parallel.actionRun (328 samples, 32.80%)</title><rect x="790.0" y="277" width="387.0" height="15.0" fill="rgb(253,20,18)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.Parallel.actionRun</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.QuickCheck.testProperty (328 samples, 32.80%)</title><rect x="790.0" y="165" width="387.0" height="15.0" fill="rgb(213,33,40)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.QuickCheck.testProperty</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Matching.Database.Data.Equality.Matching.Database.genericJoin (482 samples, 48.20%)</title><rect x="221.2" y="357" width="568.8" height="15.0" fill="rgb(237,52,11)" rx="2" ry="2" />
<text text-anchor="" x="224.22" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data.Equality.Matching.Database.Data.Equality.Matching.Database.genericJoin</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (5 samples, 0.50%)</title><rect x="959.9" y="101" width="5.9" height="15.0" fill="rgb(237,59,21)" rx="2" ry="2" />
<text text-anchor="" x="962.90" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Test.quickCheckWithResult (328 samples, 32.80%)</title><rect x="790.0" y="245" width="387.0" height="15.0" fill="rgb(206,173,8)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Test.quickCheckWithResult</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.defaultMain (328 samples, 32.80%)</title><rect x="790.0" y="389" width="387.0" height="15.0" fill="rgb(243,114,43)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.defaultMain</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.sized (148 samples, 14.80%)</title><rect x="819.5" y="149" width="174.6" height="15.0" fill="rgb(249,213,0)" rx="2" ry="2" />
<text text-anchor="" x="822.48" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Gen.si..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.repair (31 samples, 3.10%)</title><rect x="929.2" y="117" width="36.6" height="15.0" fill="rgb(220,61,1)" rx="2" ry="2" />
<text text-anchor="" x="932.22" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Dat..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Sym.CAF (661 samples, 66.10%)</title><rect x="10.0" y="389" width="780.0" height="15.0" fill="rgb(225,26,35)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Sym.CAF</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.add (72 samples, 7.20%)</title><rect x="1034.2" y="117" width="85.0" height="15.0" fill="rgb(214,16,48)" rx="2" ry="2" />
<text text-anchor="" x="1037.24" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data.Equal..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseInt (9 samples, 0.90%)</title><rect x="1165.2" y="101" width="10.6" height="15.0" fill="rgb(205,180,44)" rx="2" ry="2" />
<text text-anchor="" x="1168.22" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MAIN.MAIN (989 samples, 98.90%)</title><rect x="10.0" y="405" width="1167.0" height="15.0" fill="rgb(210,109,10)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >MAIN.MAIN</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Extraction.Data.Equality.Extraction.findCosts (38 samples, 3.80%)</title><rect x="30.1" y="341" width="44.8" height="15.0" fill="rgb(251,50,28)" rx="2" ry="2" />
<text text-anchor="" x="33.06" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.bitmaskWithRejection64' (3 samples, 0.30%)</title><rect x="1172.3" y="37" width="3.5" height="15.0" fill="rgb(239,223,18)" rx="2" ry="2" />
<text text-anchor="" x="1175.30" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.add (53 samples, 5.30%)</title><rect x="74.9" y="357" width="62.5" height="15.0" fill="rgb(221,182,35)" rx="2" ry="2" />
<text text-anchor="" x="77.90" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data.E..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (1 samples, 0.10%)</title><rect x="203.5" y="309" width="1.2" height="15.0" fill="rgb(211,197,23)" rx="2" ry="2" />
<text text-anchor="" x="206.52" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Saturation.Data.Equality.Saturation.equalitySaturation' (661 samples, 66.10%)</title><rect x="10.0" y="373" width="780.0" height="15.0" fill="rgb(221,122,9)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data.Equality.Saturation.Data.Equality.Saturation.equalitySaturation'</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.bitmaskWithRejection64' (4 samples, 0.40%)</title><rect x="989.4" y="53" width="4.7" height="15.0" fill="rgb(237,161,14)" rx="2" ry="2" />
<text text-anchor="" x="992.40" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseBoundedIntegral (12 samples, 1.20%)</title><rect x="980.0" y="101" width="14.1" height="15.0" fill="rgb(208,219,45)" rx="2" ry="2" />
<text text-anchor="" x="982.96" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseBoundedIntegral (1 samples, 0.10%)</title><rect x="965.8" y="117" width="1.2" height="15.0" fill="rgb(251,165,38)" rx="2" ry="2" />
<text text-anchor="" x="968.80" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Matching.Data.Equality.Matching.eGraphToDatabase (5 samples, 0.50%)</title><rect x="810.0" y="149" width="5.9" height="15.0" fill="rgb(220,167,54)" rx="2" ry="2" />
<text text-anchor="" x="813.04" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.splitSMGen (2 samples, 0.20%)</title><rect x="1162.9" y="101" width="2.3" height="15.0" fill="rgb(231,95,48)" rx="2" ry="2" />
<text text-anchor="" x="1165.86" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.merge (1 samples, 0.10%)</title><rect x="129.2" y="341" width="1.2" height="15.0" fill="rgb(211,182,2)" rx="2" ry="2" />
<text text-anchor="" x="132.18" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Extraction.Data.Equality.Extraction.extractBest (38 samples, 3.80%)</title><rect x="30.1" y="357" width="44.8" height="15.0" fill="rgb(224,180,17)" rx="2" ry="2" />
<text text-anchor="" x="33.06" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Data..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.rebuild (29 samples, 2.90%)</title><rect x="175.2" y="357" width="34.2" height="15.0" fill="rgb(209,102,40)" rx="2" ry="2" />
<text text-anchor="" x="178.20" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Da..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Test.test (328 samples, 32.80%)</title><rect x="790.0" y="197" width="387.0" height="15.0" fill="rgb(251,74,33)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Test.test</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.resize (1 samples, 0.10%)</title><rect x="1175.8" y="101" width="1.2" height="15.0" fill="rgb(234,187,16)" rx="2" ry="2" />
<text text-anchor="" x="1178.84" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.merge (10 samples, 1.00%)</title><rect x="192.9" y="325" width="11.8" height="15.0" fill="rgb(220,172,38)" rx="2" ry="2" />
<text text-anchor="" x="195.90" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.repair (29 samples, 2.90%)</title><rect x="175.2" y="341" width="34.2" height="15.0" fill="rgb(247,47,12)" rx="2" ry="2" />
<text text-anchor="" x="178.20" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Da..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (6 samples, 0.60%)</title><rect x="130.4" y="341" width="7.0" height="15.0" fill="rgb(224,199,36)" rx="2" ry="2" />
<text text-anchor="" x="133.36" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Concurrent.Async.async (328 samples, 32.80%)</title><rect x="790.0" y="293" width="387.0" height="15.0" fill="rgb(208,6,3)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Concurrent.Async.async</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Test.withState (328 samples, 32.80%)</title><rect x="790.0" y="229" width="387.0" height="15.0" fill="rgb(233,37,14)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Test.withState</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (4 samples, 0.40%)</title><rect x="805.3" y="149" width="4.7" height="15.0" fill="rgb(240,208,49)" rx="2" ry="2" />
<text text-anchor="" x="808.32" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (4 samples, 0.40%)</title><rect x="1149.9" y="85" width="4.7" height="15.0" fill="rgb(219,92,29)" rx="2" ry="2" />
<text text-anchor="" x="1152.88" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (3 samples, 0.30%)</title><rect x="171.7" y="341" width="3.5" height="15.0" fill="rgb(247,179,9)" rx="2" ry="2" />
<text text-anchor="" x="174.66" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.splitSMGen (2 samples, 0.20%)</title><rect x="977.6" y="117" width="2.4" height="15.0" fill="rgb(230,80,12)" rx="2" ry="2" />
<text text-anchor="" x="980.60" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseInt (12 samples, 1.20%)</title><rect x="980.0" y="117" width="14.1" height="15.0" fill="rgb(249,195,18)" rx="2" ry="2" />
<text text-anchor="" x="982.96" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseBoundedIntegral (9 samples, 0.90%)</title><rect x="1165.2" y="85" width="10.6" height="15.0" fill="rgb(239,20,32)" rx="2" ry="2" />
<text text-anchor="" x="1168.22" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.splitSMGen (1 samples, 0.10%)</title><rect x="1169.9" y="53" width="1.2" height="15.0" fill="rgb(243,96,53)" rx="2" ry="2" />
<text text-anchor="" x="1172.94" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (1,000 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(246,221,32)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.Data.Equality.Graph.add (1 samples, 0.10%)</title><rect x="815.9" y="133" width="1.2" height="15.0" fill="rgb(245,165,37)" rx="2" ry="2" />
<text text-anchor="" x="818.94" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.splitSMGen (1 samples, 0.10%)</title><rect x="987.0" y="69" width="1.2" height="15.0" fill="rgb(251,99,51)" rx="2" ry="2" />
<text text-anchor="" x="990.04" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.Ingredients.tryIngredients (328 samples, 32.80%)</title><rect x="790.0" y="357" width="387.0" height="15.0" fill="rgb(225,194,11)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.Ingredients.tryIngredients</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.CmdLine.defaultMainWithIngredients (328 samples, 32.80%)</title><rect x="790.0" y="373" width="387.0" height="15.0" fill="rgb(241,100,10)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.CmdLine.defaultMainWithIngredients</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Saturation.Data.Equality.Saturation.equalitySaturation' (3 samples, 0.30%)</title><rect x="815.9" y="149" width="3.6" height="15.0" fill="rgb(220,160,15)" rx="2" ry="2" />
<text text-anchor="" x="818.94" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Equality.Graph.ReprUnionFind.Data.Equality.Graph.ReprUnionFind.findRepr (4 samples, 0.40%)</title><rect x="70.2" y="325" width="4.7" height="15.0" fill="rgb(218,157,42)" rx="2" ry="2" />
<text text-anchor="" x="73.18" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseInt (1 samples, 0.10%)</title><rect x="965.8" y="133" width="1.2" height="15.0" fill="rgb(236,200,51)" rx="2" ry="2" />
<text text-anchor="" x="968.80" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.sized (155 samples, 15.50%)</title><rect x="994.1" y="133" width="182.9" height="15.0" fill="rgb(215,96,30)" rx="2" ry="2" />
<text text-anchor="" x="997.12" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Gen.sized</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseUpTo (4 samples, 0.40%)</title><rect x="1171.1" y="53" width="4.7" height="15.0" fill="rgb(224,136,28)" rx="2" ry="2" />
<text text-anchor="" x="1174.12" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>System.Random.SplitMix.nextWord64 (1 samples, 0.10%)</title><rect x="992.9" y="37" width="1.2" height="15.0" fill="rgb(230,157,44)" rx="2" ry="2" />
<text text-anchor="" x="995.94" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.Tasty.Run.launchTestTree (328 samples, 32.80%)</title><rect x="790.0" y="341" width="387.0" height="15.0" fill="rgb(225,65,16)" rx="2" ry="2" />
<text text-anchor="" x="792.98" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.Tasty.Run.launchTestTree</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseUpTo (5 samples, 0.50%)</title><rect x="988.2" y="69" width="5.9" height="15.0" fill="rgb(242,127,28)" rx="2" ry="2" />
<text text-anchor="" x="991.22" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Gen.chooseInt64 (8 samples, 0.80%)</title><rect x="1166.4" y="69" width="9.4" height="15.0" fill="rgb(248,217,10)" rx="2" ry="2" />
<text text-anchor="" x="1169.40" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Test.QuickCheck.Property.forAllShrinkBlind (155 samples, 15.50%)</title><rect x="994.1" y="149" width="182.9" height="15.0" fill="rgb(233,80,11)" rx="2" ry="2" />
<text text-anchor="" x="997.12" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Test.QuickCheck.Propert..</text>
</g>
</svg>
